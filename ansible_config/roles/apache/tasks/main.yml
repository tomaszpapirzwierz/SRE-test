---
# Include variables and define needed variables.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Include variables for Amazon Linux.
  include_vars: "AmazonLinux.yml"
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA"

- name: Define apache_packages.
  set_fact:
    apache_packages: "{{ __apache_packages | list }}"
  when: apache_packages is not defined

# Setup/install tasks.
- include: "setup-{{ ansible_os_family }}.yml"
  static: no

# Figure out what version of Apache is installed.
- name: Get installed version of Apache.
  shell: "{{ apache_daemon_path }}{{ apache_daemon }} -v"
  changed_when: false
# check_mode: no
  register: _apache_version

- name: Create apache_version variable.
  set_fact:
    apache_version: "{{ _apache_version.stdout.split()[2].split('/')[1] }}"

- include_vars: apache-22.yml
  when: "apache_version.split('.')[1] == '2'"

- include_vars: apache-24.yml
  when: "apache_version.split('.')[1] == '4'"

# Configure Apache.
- include: "configure-{{ ansible_os_family }}.yml"
  static: no

- name: Ensure Apache has selected state and enabled on boot.
  service:
    name: "{{ apache_service }}"
    state: "{{ apache_state }}"
    enabled: yes

- name: Set SELinux permission for httpd
  seboolean: name=httpd_can_network_connect state=yes persistent=yes

- name: Create a deafult-site.conf file
  file: path=/etc/httpd/conf.d/default-site.conf state=touch mode="u=rwx,g=rw,o=x"

- name: Configure ProxyPass settings
  blockinfile: |
    dest=/etc/httpd/conf.d/default-site.conf
    block='<VirtualHost *:8080>
             <Proxy balancer://mycluster>
             BalancerMember http://{{ appserver1_ip }}:8080
             BalancerMember http://{{ appserver2_ip }}:8080
             </Proxy>
             ProxyPreserveHost On
             ProxyPass "/sample" "http://{{ appserver1_ip }}:8080/sample/" retry=0 timeout=5
             ProxyPassReverse "/sample" "http://{{ appserver2_ip }}:8080/sample/"
             </VirtualHost>'




